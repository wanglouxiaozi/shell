#!/bin/bash
#author:allen
#mail:allenwang@tvunetworks.com

demoFun() {
	echo "这是我的第一个shell函数！"
}
echo "-------函数开始执行--------"
demoFun
echo "-------函数执行完毕--------"
echo "==========================================================="


funWithReturn() {
	echo "这个函数会对输入的两个数进行相加运算..."
	echo "输入第一个数字: "
	read aNum
	echo "输入第二个数字: "
	read anotherNum
	echo "两个数字分别为 $aNum 和 $anotherNum"
	#return $(($aNum+$anotherNum))
	#return $(( $aNum + $anotherNum ))
	return $((aNum + anotherNum))
}

funWithReturn
echo "输入的两个数字之和为 $?"
#注意: 所有函数在使用前必须定义。这意味着必须将函数放在脚本开始部分，直至shell解释器首次发现它时，才可以使用。调用函数仅使用其函数名即可。
echo "==========================================================="


#函数参数
#在Shell中，调用函数时可以向其传递参数。在函数体内部，通过 $n 的形式来获取参数的值，例如，$1表示第一个参数，$2表示第二个参数...
#带参数的函数示例：
funWithParam() {
	echo "第一个参数为: $1"
	echo "第二个参数为: $2"
	echo "第三个参数为: $3"
	echo "第四个参数为: $4"
	echo "第五个参数为: $5"
	echo "第六个参数为: $6"
	echo "第七个参数为: $7"
	echo "第八个参数为: $8"
	echo "第九个参数为: $9"
	echo "第十个参数为: $10"
	echo "第十个参数为: ${10}"
	echo "第十一个参数为: ${11}"
	echo "参数总数有: $# 个"
	echo "作为一个字符串输出所有参数: $*"
}

funWithParam 1 2 3 4 5 6 7 8 9 34 73
#注意: $10不能获取第十个参数，获取第十个参数需要${10}.当n >= 10 时，需要使用${n}来获取参数。
#另外，还有几个特殊字符用来处理参数:

func() {
	$#	传递到脚本的参数个数
	$*	以一个单字符串显示所有向脚本传递的参数
	$$	脚本运行的当前进程ID号
	$!	后台运行的最后一个进程的ID号
	$@	与$*相同，但是使用时加引号，并在引号中返回每个参数。
	$-	显示Shell使用的当前选项，与set命令功能相同。
	$?	显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。
}
